from fastapi import APIRouter, HTTPException, Query, Request
from pydantic import BaseModel
import json
import random
import string
from typing import List, Optional
import os
import requests
import re
from dotenv import load_dotenv
from bible_loader import bible_loader

load_dotenv()

# --- Configuration de l'IA ---
TOGETHER_API_KEY = os.environ.get("TOGETHER_API_KEY")
API_URL = "https://api.together.xyz/v1/chat/completions"

router = APIRouter()

# ============================================
# üÜï FONCTION HELPER POUR R√âCUP√âRER LES VERSETS
# ============================================
def parse_and_fetch_verses(reference: str, request: Request) -> list:
    """Parse une r√©f√©rence et r√©cup√®re les versets (JSON local multilingue)."""
    language = getattr(request.state, "language", "fr")
    
    # Utiliser bible_loader qui g√®re maintenant FR et EN en local
    verses = bible_loader.get_verses_for_reference(reference, language)
    
    if not verses:
        raise HTTPException(404, f"Verses not found for reference: {reference}")
    
    return verses

# --- Mod√®les de donn√©es ---
class ReferenceRequest(BaseModel):
    reference: str
    niveau: str
    mots_deja_utilises: Optional[List[str]] = None

class RandomQcmRequest(BaseModel):
    mots_deja_utilises: Optional[List[str]] = None
    livre: Optional[str] = None
    chapitre: Optional[int] = None

class VerificationRequest(BaseModel):
    reponses_utilisateur: List[str]
    reponses_correctes: List[str]

class RandomJeuRequest(BaseModel):
    niveau: str
    longueur: str
    livre: Optional[str] = None
    chapitre: Optional[int] = None

class ReferenceQuestionRequest(BaseModel):
    difficulty: str
    source_group: Optional[str] = None
    source_refs: Optional[List[str]] = None
    source_book: Optional[str] = None

class RemettreEnOrdreRequest(BaseModel):
    reference: str

# Dictionnaire des cat√©gories de livres
# Dictionnaire des cat√©gories de livres - VERSION BILINGUE
BOOK_GROUPS = {
    "ancien_testament": {
        "fr": [
            "Gen√®se", "Exode", "L√©vitique", "Nombres", "Deut√©ronome", "Josu√©", "Juges", "Ruth", 
            "1 Samuel", "2 Samuel", "1 Rois", "2 Rois", "1 Chroniques", "2 Chroniques", "Esdras", 
            "N√©h√©mie", "Esther", "Job", "Psaumes", "Proverbes", "Eccl√©siaste", "Cantique des Cantiques", 
            "√âsa√Øe", "J√©r√©mie", "Lamentations", "√âz√©chiel", "Daniel", "Os√©e", "Jo√´l", "Amos", "Abdias", 
            "Jonas", "Mich√©e", "Nahum", "Habacuc", "Sophonie", "Agg√©e", "Zacharie", "Malachie"
        ],
        "en": [
            "Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua", "Judges", "Ruth",
            "1 Samuel", "2 Samuel", "1 Kings", "2 Kings", "1 Chronicles", "2 Chronicles", "Ezra",
            "Nehemiah", "Esther", "Job", "Psalms", "Proverbs", "Ecclesiastes", "Song of Solomon",
            "Isaiah", "Jeremiah", "Lamentations", "Ezekiel", "Daniel", "Hosea", "Joel", "Amos", "Obadiah",
            "Jonah", "Micah", "Nahum", "Habakkuk", "Zephaniah", "Haggai", "Zechariah", "Malachi"
        ]
    },
    "nouveau_testament": {
        "fr": [
            "Matthieu", "Marc", "Luc", "Jean", "Actes", "Romains", "1 Corinthiens", "2 Corinthiens", 
            "Galates", "√âph√©siens", "Philippiens", "Colossiens", "1 Thessaloniciens", "2 Thessaloniciens", 
            "1 Timoth√©e", "2 Timoth√©e", "Tite", "Phil√©mon", "H√©breux", "Jacques", "1 Pierre", "2 Pierre", 
            "1 Jean", "2 Jean", "3 Jean", "Jude", "Apocalypse"
        ],
        "en": [
            "Matthew", "Mark", "Luke", "John", "Acts", "Romans", "1 Corinthians", "2 Corinthians",
            "Galatians", "Ephesians", "Philippians", "Colossians", "1 Thessalonians", "2 Thessalonians",
            "1 Timothy", "2 Timothy", "Titus", "Philemon", "Hebrews", "James", "1 Peter", "2 Peter",
            "1 John", "2 John", "3 John", "Jude", "Revelation"
        ]
    },
    "pentateuque": {
        "fr": ["Gen√®se", "Exode", "L√©vitique", "Nombres", "Deut√©ronome"],
        "en": ["Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy"]
    },
    "historiques": {
        "fr": ["Josu√©", "Juges", "Ruth", "1 Samuel", "2 Samuel", "1 Rois", "2 Rois", "1 Chroniques", 
               "2 Chroniques", "Esdras", "N√©h√©mie", "Esther"],
        "en": ["Joshua", "Judges", "Ruth", "1 Samuel", "2 Samuel", "1 Kings", "2 Kings", "1 Chronicles",
               "2 Chronicles", "Ezra", "Nehemiah", "Esther"]
    },
    "poetiques": {
        "fr": ["Job", "Psaumes", "Proverbes", "Eccl√©siaste", "Cantique des Cantiques"],
        "en": ["Job", "Psalms", "Proverbs", "Ecclesiastes", "Song of Solomon"]
    },
    "prophetes_majeurs": {
        "fr": ["√âsa√Øe", "J√©r√©mie", "Lamentations", "√âz√©chiel", "Daniel"],
        "en": ["Isaiah", "Jeremiah", "Lamentations", "Ezekiel", "Daniel"]
    },
    "prophetes_mineurs": {
        "fr": ["Os√©e", "Jo√´l", "Amos", "Abdias", "Jonas", "Mich√©e", "Nahum", "Habacuc", "Sophonie", 
               "Agg√©e", "Zacharie", "Malachie"],
        "en": ["Hosea", "Joel", "Amos", "Obadiah", "Jonah", "Micah", "Nahum", "Habakkuk", "Zephaniah",
               "Haggai", "Zechariah", "Malachi"]
    },
    "evangiles": {
        "fr": ["Matthieu", "Marc", "Luc", "Jean"],
        "en": ["Matthew", "Mark", "Luke", "John"]
    },
    "histoire_nt": {
        "fr": ["Actes"],
        "en": ["Acts"]
    },
    "epitres_paul": {
        "fr": ["Romains", "1 Corinthiens", "2 Corinthiens", "Galates", "√âph√©siens", "Philippiens", 
               "Colossiens", "1 Thessaloniciens", "2 Thessaloniciens", "1 Timoth√©e", "2 Timoth√©e", 
               "Tite", "Phil√©mon"],
        "en": ["Romans", "1 Corinthians", "2 Corinthians", "Galatians", "Ephesians", "Philippians",
               "Colossians", "1 Thessalonians", "2 Thessalonians", "1 Timothy", "2 Timothy", "Titus", "Philemon"]
    },
    "epitres_generales": {
        "fr": ["H√©breux", "Jacques", "1 Pierre", "2 Pierre", "1 Jean", "2 Jean", "3 Jean", "Jude"],
        "en": ["Hebrews", "James", "1 Peter", "2 Peter", "1 John", "2 John", "3 John", "Jude"]
    },
    "apocalypse": {
        "fr": ["Apocalypse"],
        "en": ["Revelation"]
    }
}

# Fonction helper mise √† jour
def find_book_category(book_name: str, language: str = "fr") -> Optional[str]:
    """Trouve la cat√©gorie d'un livre selon la langue."""
    for category, books_dict in BOOK_GROUPS.items():
        if isinstance(books_dict, dict):
            books = books_dict.get(language, books_dict.get("fr", []))
        else:
            # R√©trocompatibilit√© si l'ancien format est utilis√©
            books = books_dict
        
        if book_name in books:
            return category.replace("_", " ").capitalize()
    return None

def get_books_for_category(category: str, language: str = "fr") -> List[str]:
    """Retourne la liste des livres d'une cat√©gorie dans la langue sp√©cifi√©e."""
    books_dict = BOOK_GROUPS.get(category, {})
    
    if isinstance(books_dict, dict):
        return books_dict.get(language, books_dict.get("fr", []))
    else:
        # R√©trocompatibilit√©
        return books_dict

# Exemple d'utilisation
# books_fr = get_books_for_category("evangiles", "fr")
# # ["Matthieu", "Marc", "Luc", "Jean"]
# 
# books_en = get_books_for_category("evangiles", "en")
# # ["Matthew", "Mark", "Luke", "John"]

def normalize_text(s: str) -> str:
    """Met en minuscule, retire les accents et la ponctuation."""
    s = s.lower().strip()
    replacements = (
        ("√°", "a"), ("√†", "a"), ("√¢", "a"), ("√§", "a"),
        ("√©", "e"), ("√®", "e"), ("√™", "e"), ("√´", "e"),
        ("√≠", "i"), ("√Æ", "i"), ("√Ø", "i"),
        ("√≥", "o"), ("√¥", "o"), ("√∂", "o"),
        ("√∫", "u"), ("√π", "u"), ("√ª", "u"), ("√º", "u"),
        ("√ß", "c"),
    )
    for a, b in replacements:
        s = s.replace(a, b)
    return s.translate(str.maketrans('', '', string.punctuation))

def levenshtein_distance(s1: str, s2: str) -> int:
    """Calcule la distance de Levenshtein entre deux cha√Ænes."""
    if len(s1) < len(s2):
        return levenshtein_distance(s2, s1)
    if len(s2) == 0:
        return len(s1)
    
    previous_row = range(len(s2) + 1)
    for i, c1 in enumerate(s1):
        current_row = [i + 1]
        for j, c2 in enumerate(s2):
            insertions = previous_row[j + 1] + 1
            deletions = current_row[j] + 1
            substitutions = previous_row[j] + (c1 != c2)
            current_row.append(min(insertions, deletions, substitutions))
        previous_row = current_row
    return previous_row[-1]

def are_strings_similar(s1: str, s2: str, tolerance: float = 0.85) -> bool:
    """V√©rifie si deux cha√Ænes sont similaires au-del√† d'un seuil de tol√©rance."""
    norm_s1 = normalize_text(s1)
    norm_s2 = normalize_text(s2)
    
    if not norm_s1 or not norm_s2:
        return norm_s1 == norm_s2

    distance = levenshtein_distance(norm_s1, norm_s2)
    max_len = max(len(norm_s1), len(norm_s2))
    similarity = 1 - (distance / max_len)
    
    return similarity >= tolerance

def generer_mots_ia(contexte_pour_ia, mot_correct, livre):
    """G√©n√®re des mots distracteurs avec l'IA ou utilise un fallback."""
    try:
        if not TOGETHER_API_KEY:
            raise Exception("Cl√© API manquante")
            
        headers = {"Authorization": f"Bearer {TOGETHER_API_KEY}"}
        
        prompt = f"""
        Contexte biblique : "{contexte_pour_ia}" (du livre {livre})
        
        Le mot manquant est "{mot_correct}".
        
        G√©n√®re exactement 3 mots distracteurs bibliques qui :
        1. Sont plausibles dans ce contexte
        2. Sont diff√©rents de "{mot_correct}"
        3. Sont des mots fran√ßais courants dans la Bible
        
        R√©ponds uniquement avec les 3 mots, s√©par√©s par des virgules.
        """
        
        data = {
            "model": "meta-llama/Llama-2-7b-chat-hf",
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": 50,
            "temperature": 0.7
        }
        
        response = requests.post(API_URL, json=data, headers=headers, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            content = result.get("choices", [{}])[0].get("message", {}).get("content", "")
            mots = [mot.strip() for mot in content.split(",")]
            if len(mots) >= 3:
                return mots[:3]
        
        raise Exception("R√©ponse IA invalide")
        
    except Exception as e:
        print(f"Erreur IA: {e}")
        return ["amour", "paix", "joie"]

# ============================================
# ROUTES DE L'API
# ============================================

@router.post("/jeu")
def jeu_texte_a_trous(data: ReferenceRequest, request: Request):
    """Jeu de texte √† trous avec support multilingue."""
    try:
        versets_selectionnes = parse_and_fetch_verses(data.reference, request)
        
        if not versets_selectionnes:
            return {"error": "Aucun verset trouv√© pour cette r√©f√©rence."}
        
        nombre_de_versets = len(versets_selectionnes)
        passage_pour_jeu = []
        
        if nombre_de_versets > 3:
            passage_pour_jeu = [random.choice(versets_selectionnes)]
        else:
            passage_pour_jeu = versets_selectionnes
        
        if not passage_pour_jeu:
            return {"error": "Impossible de g√©n√©rer un passage."}
        
        texte_complet = " ".join([v["text"] for v in passage_pour_jeu])
        
        premier = passage_pour_jeu[0]
        dernier = passage_pour_jeu[-1]
        
        if premier.get('verse') == dernier.get('verse'):
            reference_exacte = f"{premier['book_name']} {premier['chapter']}:{premier['verse']}"
        else:
            reference_exacte = f"{premier['book_name']} {premier['chapter']}:{premier['verse']}-{dernier['verse']}"
        
        mots = texte_complet.split()
        nb_mots = {"d√©butant": 2, "interm√©diaire": 4, "expert": 6}.get(data.niveau.lower(), 2)
        nb_mots = min(nb_mots, len(mots) // 2)
        
        indices_disponibles = [i for i, mot in enumerate(mots) if len(mot) > 3]
        if not indices_disponibles:
            return {"error": "Le passage est trop court."}
        
        random.shuffle(indices_disponibles)
        indices_choisis = sorted(indices_disponibles[:nb_mots])
        
        reponses = [re.sub(r'[^\w\s-]', '', mots[i]) for i in indices_choisis]
        for i in indices_choisis:
            mots[i] = "_____"
        
        return {
            "verset_modifie": " ".join(mots),
            "reponses": reponses,
            "indices": indices_choisis,
            "reference": reference_exacte
        }
        
    except HTTPException:
        raise
    except Exception as e:
        return {"error": f"Erreur interne: {e}"}

@router.post("/verifier")
def verifier_reponses(data: VerificationRequest):
    """V√©rifie les r√©ponses de l'utilisateur."""
    resultats = []
    for i, reponse_user in enumerate(data.reponses_utilisateur):
        reponse_correcte = data.reponses_correctes[i]
        est_correct = are_strings_similar(reponse_user, reponse_correcte)
        resultats.append(est_correct)
    
    return {"resultats": resultats}

@router.get("/passage")
def get_passage(ref: str = Query(...), request: Request = None):
    """R√©cup√®re un passage avec support multilingue."""
    try:
        versets = parse_and_fetch_verses(ref, request)
        
        if not versets:
            return []
        
        versets.sort(key=lambda v: int(v.get('verse', 0)))
        
        return [
            {
                "reference": f"{v['book_name']} {v['chapter']}:{v['verse']}",
                "text": v['text']
            }
            for v in versets
        ]
        
    except Exception as e:
        print(f"Error in /passage: {e}")
        return []

@router.post("/qcm")
def jeu_qcm(data: ReferenceRequest, request: Request):
    """G√©n√®re une question QCM avec support multilingue complet."""
    try:
        language = getattr(request.state, "language", "fr")
        print(f"üéÆ /qcm appel√© avec language={language}, reference={data.reference}")
        
        # ‚úÖ R√©cup√©rer les versets dans la langue demand√©e
        versets_selectionnes = parse_and_fetch_verses(data.reference, request)
        
        if not versets_selectionnes:
            return {"error": "Aucun verset trouv√© pour cette r√©f√©rence."}
        
        verset_question = random.choice(versets_selectionnes)
        
        mots_utilises = {normalize_text(mot) for mot in (data.mots_deja_utilises or [])}
        
        mots = verset_question["text"].split()
        
        mots_eligibles = {normalize_text(mot) for mot in mots if len(mot) > 3}
        mots_non_utilises = list(mots_eligibles - mots_utilises)
        
        if not mots_non_utilises and mots_eligibles:
            mots_non_utilises = list(mots_eligibles)
        
        if not mots_non_utilises:
            message = {
                "fr": "F√©licitations ! Vous avez m√©moris√© tous les mots de ce passage.",
                "en": "Congratulations! You have memorized all the words in this passage."
            }
            return {"error": message.get(language, message["fr"])}

        mot_correct = random.choice(mots_non_utilises)
        mot_a_retirer = next((mot for mot in mots if normalize_text(mot) == mot_correct), mot_correct)

        # ‚úÖ NOUVEAU : G√©n√©rer distracteurs selon la langue
        mauvais_mots = set()
        
        # R√©cup√©rer TOUS les versets de la m√™me langue
        versets_all = bible_loader.get_verses(language)
        
        if not versets_all:
            print(f"‚ö†Ô∏è Pas de versets disponibles pour {language}, utilisation de fallback")
            # Fallback selon la langue
            fallback_words = {
                "en": ["love", "faith", "hope", "grace", "peace", "truth", "light", "life", "word", "spirit"],
                "fr": ["amour", "foi", "esp√©rance", "gr√¢ce", "paix", "v√©rit√©", "lumi√®re", "vie", "parole", "esprit"]
            }
            mauvais_mots = set(random.sample(fallback_words.get(language, fallback_words["fr"]), 3))
        else:
            # G√©n√©rer des distracteurs intelligents selon le niveau
            if data.niveau == "facile":
                # Facile : mots d'autres livres
                pool = [v for v in versets_all if v.get("book_name") != verset_question.get("book_name")]
            elif data.niveau == "difficile":
                # Difficile : mots du m√™me chapitre
                pool = [v for v in versets_all 
                       if v.get("book_name") == verset_question.get("book_name") 
                       and v.get("chapter") == verset_question.get("chapter")]
            else:
                # Moyen : mots du m√™me livre
                pool = [v for v in versets_all if v.get("book_name") == verset_question.get("book_name")]

            random.shuffle(pool)
            
            # Extraire des mots distracteurs
            while len(mauvais_mots) < 3 and pool:
                mots_option = pool.pop()['text'].split()
                mots_propres = {normalize_text(m) for m in mots_option if len(m) > 3}
                mots_propres.discard(mot_correct.lower())
                if mots_propres:
                    mauvais_mots.add(random.choice(list(mots_propres)))

            # Si pas assez de distracteurs, utiliser fallback
            while len(mauvais_mots) < 3:
                fallback = ["love", "peace", "faith"] if language == "en" else ["amour", "paix", "joie"]
                mauvais_mots.add(random.choice(fallback))

        # Cr√©er la question avec le mot manquant
        question = verset_question["text"].replace(mot_a_retirer, "_____", 1)
        options = list(mauvais_mots) + [mot_correct]
        random.shuffle(options)
        
        verset_ref = f"{verset_question.get('book_name')} {verset_question.get('chapter')}:{verset_question.get('verse')}"

        print(f"‚úÖ Question g√©n√©r√©e en {language}: {len(options)} options")
        
        return {
            "question": question,
            "options": options,
            "reponse_correcte": mot_correct,
            "reference": verset_ref
        }

    except Exception as e:
        print(f"‚ùå Erreur dans /qcm: {e}")
        import traceback
        traceback.print_exc()
        return {"error": f"Une erreur interne est survenue: {e}"}
  

@router.get("/verser")
def get_single_verse(ref: str = Query(...), request: Request = None):
    """R√©cup√®re un seul verset avec support multilingue."""
    try:
        versets = parse_and_fetch_verses(ref, request)
        
        if versets:
            return {"text": versets[0].get("text", "Texte non trouv√©.")}
        
        raise HTTPException(status_code=404, detail=f"Verset '{ref}' non trouv√©.")
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/generer-question-reference")
def generate_reference_question(request_data: ReferenceQuestionRequest, request: Request):
    """G√©n√®re une question de r√©f√©rence avec support multilingue complet."""
    language = getattr(request.state, "language", "fr")
    print(f"üéØ /generer-question-reference appel√© avec language={language}")
    
    # ‚úÖ Charger les versets dans la langue demand√©e
    versets = bible_loader.get_verses(language)
    
    if not versets:
        error_msg = {
            "fr": "Aucun verset disponible pour cette langue.",
            "en": "No verses available for this language."
        }
        return {"error": error_msg.get(language, error_msg["fr"])}
    
    pool_source = versets
    is_specific_book = request_data.source_book is not None
    source_book_names = set()

    # ‚úÖ Filtrer selon le livre ou le groupe
    if is_specific_book:
        # Normaliser le nom du livre pour la comparaison
        source_book_lower = request_data.source_book.lower()
        pool_source = [v for v in versets if v.get("book_name", "").lower() == source_book_lower]
        
        if not pool_source:
            print(f"‚ö†Ô∏è Aucun verset trouv√© pour le livre '{request_data.source_book}'")
            error_msg = {
                "fr": f"Aucun verset trouv√© pour le livre '{request_data.source_book}'.",
                "en": f"No verses found for the book '{request_data.source_book}'."
            }
            return {"error": error_msg.get(language, error_msg["fr"])}
            
    elif request_data.source_group:
        # Utiliser la langue appropri√©e pour les groupes
        source_books = get_books_for_category(request_data.source_group, language)
        source_book_names = {book.lower() for book in source_books}
        pool_source = [v for v in versets if v.get("book_name", "").lower() in source_book_names]
        
        if not pool_source:
            error_msg = {
                "fr": f"Aucun verset trouv√© pour le groupe '{request_data.source_group}'.",
                "en": f"No verses found for the group '{request_data.source_group}'."
            }
            return {"error": error_msg.get(language, error_msg["fr"])}

    if not pool_source:
        error_msg = {
            "fr": "La source choisie est vide.",
            "en": "The chosen source is empty."
        }
        raise HTTPException(status_code=400, detail=error_msg.get(language, error_msg["fr"]))

    # ‚úÖ Choisir un verset al√©atoire
    verset_correct = random.choice(pool_source)
    texte_de_la_question = verset_correct.get("text", "")
    
    options = set()
    reponse_correcte = ""

    # ‚úÖ G√©n√©rer les options selon la difficult√©
    if is_specific_book:
        if request_data.difficulty == "facile":
            # Facile : Livre + Chapitre
            reponse_correcte = f"{verset_correct.get('book_name')} {verset_correct.get('chapter')}"
            options.add(reponse_correcte)
            
            # Distracteurs du m√™me livre
            pool_pertinent = {
                f"{v.get('book_name')} {v.get('chapter')}" 
                for v in pool_source 
                if f"{v.get('book_name')} {v.get('chapter')}" != reponse_correcte
            }
            
            # Distracteurs d'autres livres
            pool_general = {
                f"{v.get('book_name')} {v.get('chapter')}" 
                for v in versets 
                if v.get("book_name", "").lower() != request_data.source_book.lower()
            }
            
            if len(pool_pertinent) >= 2: 
                options.update(random.sample(list(pool_pertinent), 2))
            if len(options) < 4 and pool_general: 
                options.add(random.choice(list(pool_general)))
                
        else:  # Moyen ou Difficile
            # Livre + Chapitre + Verset
            reponse_correcte = f"{verset_correct.get('book_name')} {verset_correct.get('chapter')}:{verset_correct.get('verse')}"
            options.add(reponse_correcte)
            
            pool_distracteurs = [v for v in pool_source if v != verset_correct]
            if len(pool_distracteurs) >= 3:
                for d in random.sample(pool_distracteurs, 3):
                    options.add(f"{d.get('book_name')} {d.get('chapter')}:{d.get('verse')}")
    else:
        if request_data.difficulty == "facile":
            # Facile : Nom du livre uniquement
            reponse_correcte = verset_correct.get("book_name")
            options.add(reponse_correcte)
            
            pool_pertinent = {
                v.get("book_name") 
                for v in pool_source 
                if v.get("book_name") != reponse_correcte
            }
            
            pool_general = {
                v.get("book_name") 
                for v in versets 
                if v.get("book_name", "").lower() not in source_book_names
            }
            
            if len(pool_pertinent) >= 2: 
                options.update(random.sample(list(pool_pertinent), 2))
            if len(options) < 4 and pool_general: 
                options.add(random.choice(list(pool_general)))
                
        elif request_data.difficulty == "moyen":
            # Moyen : Livre + Chapitre
            reponse_correcte = f"{verset_correct.get('book_name')} {verset_correct.get('chapter')}"
            options.add(reponse_correcte)
            
            pool_distracteurs = [
                v for v in pool_source 
                if f"{v.get('book_name')} {v.get('chapter')}" != reponse_correcte
            ]
            
            while len(options) < 4 and pool_distracteurs:
                d = random.choice(pool_distracteurs)
                options.add(f"{d.get('book_name')} {d.get('chapter')}")
                pool_distracteurs.remove(d)
                
        else:  # Difficile
            # Difficile : Livre + Chapitre + Verset
            reponse_correcte = f"{verset_correct.get('book_name')} {verset_correct.get('chapter')}:{verset_correct.get('verse')}"
            options.add(reponse_correcte)
            
            distracteurs_pool = [v for v in pool_source if v != verset_correct]
            if len(distracteurs_pool) >= 3:
                for d in random.sample(distracteurs_pool, 3):
                    options.add(f"{d.get('book_name')} {d.get('chapter')}:{d.get('verse')}")

    # ‚úÖ Compl√©ter avec des distracteurs al√©atoires si n√©cessaire
    options_list = list(options)
    tentatives = 0
    while len(options_list) < 4 and tentatives < 10:
        d = random.choice(versets)
        new_option = f"{d.get('book_name')} {d.get('chapter')}:{d.get('verse')}"
        if new_option not in options_list:
            options_list.append(new_option)
        tentatives += 1
    
    random.shuffle(options_list)

    print(f"‚úÖ Question de r√©f√©rence g√©n√©r√©e en {language}")
    print(f"   Texte: {texte_de_la_question[:50]}...")
    print(f"   R√©ponse: {reponse_correcte}")
    print(f"   Options: {len(options_list)}")

    return {
        "question_text": texte_de_la_question,
        "options": options_list,
        "reponse_correcte": reponse_correcte
    }
    

@router.post("/qcm/random")
def jeu_qcm_aleatoire(data: ReferenceRequest, request: Request):
    """G√©n√®re une question QCM al√©atoire."""
    language = getattr(request.state, "language", "fr")
    
    # Cette route fonctionne uniquement en fran√ßais pour l'instant
    if language == "en":
        return {"error": "Cette fonctionnalit√© n'est disponible qu'en fran√ßais pour le moment."}
    
    try:
        versets = bible_loader.get_verses("fr")
        mots_utilises = set(data.mots_deja_utilises or [])
        
        verset_question = None
        indices_disponibles = []
        
        tentatives = 0
        while not indices_disponibles and tentatives < 50:
            verset_question = random.choice(versets)
            if len(verset_question["text"].split()) >= 5:
                mots = verset_question["text"].split()
                mots_longs_indices = [i for i, mot in enumerate(mots) if len(mot) > 3]
                indices_disponibles = [i for i in mots_longs_indices if re.sub(r'[^\w\s-]', '', mots[i]).lower() not in mots_utilises]
            tentatives += 1

        if not indices_disponibles:
            return {"error": "Impossible de trouver un nouveau mot √† m√©moriser."}

        livre = verset_question.get("book_name", "Inconnu")
        mots = verset_question["text"].split()
        
        index_mot_a_retirer = random.choice(indices_disponibles)
        mot_a_retirer = mots[index_mot_a_retirer]
        mot_correct = re.sub(r'[^\w\s-]', '', mot_a_retirer)

        debut_contexte = max(0, index_mot_a_retirer - 3)
        partie_contexte = mots[debut_contexte:index_mot_a_retirer]
        contexte_pour_ia = " ".join(partie_contexte) + " _____"

        mauvais_mots = generer_mots_ia(contexte_pour_ia, mot_correct, livre)

        question = verset_question["text"].replace(mot_a_retirer, "_____", 1)

        options = mauvais_mots + [mot_correct]
        random.shuffle(options)

        return {
            "question": question,
            "options": options,
            "reponse_correcte": mot_correct
        }

    except Exception as e:
        return {"error": f"Une erreur interne est survenue: {e}"}

@router.post("/remettre-en-ordre")
def get_unscrambled_verse_game(data: RemettreEnOrdreRequest, request: Request):
    """Jeu de remise en ordre des mots avec support multilingue."""
    try:
        versets_selectionnes = parse_and_fetch_verses(data.reference, request)

        if not versets_selectionnes:
            return {"error": "Aucun verset trouv√© pour cette r√©f√©rence."}

        verset_choisi = random.choice(versets_selectionnes)
        texte_original = verset_choisi["text"]
        
        mots = texte_original.split()
        mots_melanges = mots.copy()
        random.shuffle(mots_melanges)
        
        ref_exacte = f"{verset_choisi.get('book_name')} {verset_choisi.get('chapter')}:{verset_choisi.get('verse')}"

        jeu_data = {
            "mots_melanges": mots_melanges,
            "ordre_correct": mots,
            "texte_original": texte_original,
            "reference": ref_exacte
        }
        return {"versets": [jeu_data]}
    except Exception as e:
        return {"error": f"Une erreur interne est survenue: {e}"}